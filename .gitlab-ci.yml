stages:
  - test
  - integration
  - build
  - example
  - demo

cache:
  paths:
    - .m2/

test:jdk-8:mongo-3.2:
  stage: test
  image: maven:3.6-jdk-8
  services:
    - mongo:3.2
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2
  
test:jdk-8:mongo-3.6:
  stage: test
  image: maven:3.6-jdk-8
  services:
    - mongo:3.6
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2    
  artifacts:
    paths:
    - "server/target"
    - "example/target"

test:jdk-11:mongo-3.6:
  stage: test
  image: maven:3.6-jdk-11
  services:
    - mongo:3.6
  script: export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2

test:jdk-11:mongo-4.4:
  stage: test
  image: maven:3.6-jdk-11
  services:
    - mongo:4.4
  script:
    - export MARK_MONGO_HOST="mongo" && mvn clean install -Dgpg.skip=true -Dmaven.repo.local=.m2
    # extract code coverage from jacoco.csv
    - apt update && apt install -y gawk
    - ./jacoco-summary.sh coverage/target/site/jacoco-aggregate/jacoco.csv
    # create png uml diagram
    - apt install -y graphviz
    - sed -i 's/</\\</g' server/target/server.urm.dot
    - sed -i 's/>/\\>/g' server/target/server.urm.dot
    - sed -i 's/-\\>/->/g' server/target/server.urm.dot
    - dot -Tpng server/target/server.urm.dot -o server/target/server.urm.png
  # Use this regular expression to create the coverage badge.
  coverage: '/^\s*Instructions:\s*\d+.\d+\%/'
  artifacts:
    paths:
    - "server/target"
    - "example/target"

integration:
  stage: integration
  image: cylab/java8-mongo
  dependencies:
    # so we don't have to compile the code ourselfs..
    - test:jdk-8:mongo-3.6
  script:
    - service mongodb start
    # run example server
    - bash example/run.sh &
    - sleep 30
    - kill %1
    # test we have some results...
    - bash example/test.sh

# test the batch mode
integration:batch:
  stage: integration
  image: cylab/java8-mongo
  dependencies:
    # so we don't have to compile the code ourselfs..
    - test:jdk-8:mongo-3.6
  script:
    - service mongodb start
    # run example server in batch mode
    - bash example/run-batch.sh
    # test we have some results...
    - bash example/test.sh

#
# build docker image and push to gitlab's built-in docker registry
#
build:
  stage: build
  dependencies:
    - test:jdk-11:mongo-4.4
  # this job requires docker-in-docker
  tags:
    - dind
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # pull previous image version to enable caching inside dind
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

#
# build docker images and push to Docker Hub
# (only for tags)
#
build:tagged:
  stage: build
  # only when we push a new tag
  only:
    - tags
  dependencies:
    - test:jdk-11:mongo-4.4
  # this job requires docker-in-docker
  tags:
    - dind
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  script:
    # pull previous image version to enable caching inside dind
    - docker pull cylab/mark:latest || true
    # standalone server
    - docker build --tag cylab/mark:$CI_COMMIT_TAG --tag cylab/mark:latest .
    - docker push cylab/mark:$CI_COMMIT_TAG
    - docker push cylab/mark:latest

#
# build the example image and store in GitLab built-in registry
#
example:
  stage: example
  dependencies:
    - test:jdk-11:mongo-4.4
  # this job requires docker-in-docker
  tags:
    - dind
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd example
    - docker build --tag $CI_REGISTRY_IMAGE/example:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY_IMAGE/example:latest .
    - docker push $CI_REGISTRY_IMAGE/example:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/example:latest

# 
# deploy demo server
#
demo:
  stage: demo
  environment:
    name: mark-demo
    url: http://mark.kube.cylab.be
  image: cylab/kubectl
  before_script:
    # create the configuration (context) for our kubernetes cluster
    - kubectl config set-cluster deploy-cluster --server="$KUBE_SERVER" --insecure-skip-tls-verify
    - kubectl config set-credentials gitlab --token=$(echo $KUBE_TOKEN | base64 -d)
    - kubectl config set-context deploy-cluster --cluster=deploy-cluster --namespace=mark-demo --user=gitlab
    - kubectl config use-context deploy-cluster
  script:
    # use template to create the deploy config
    - envsubst < demo-deploy.tmpl > demo-deploy.yaml
    # deploy!
    - kubectl apply -f demo-deploy.yaml


 

